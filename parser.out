Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> control_structure
Rule 2     control_structure -> for_loop
Rule 3     control_structure -> while_loop
Rule 4     control_structure -> if_statement
Rule 5     for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN block
Rule 6     assignment -> IDENTIFIER ASSIGN NUMBER
Rule 7     condition -> IDENTIFIER RELOP NUMBER
Rule 8     increment -> IDENTIFIER PLUS
Rule 9     while_loop -> WHILE LPAREN condition RPAREN block
Rule 10    if_statement -> IF LPAREN condition RPAREN block
Rule 11    block -> LBRACE statement_list RBRACE
Rule 12    statement_list -> statement
Rule 13    statement_list -> statement statement_list
Rule 14    statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI

Terminals, with rules where they appear

ASSIGN               : 6
COMMA                : 14
DOT                  : 14
FOR                  : 5
IDENTIFIER           : 6 7 8 14 14 14
IF                   : 10
LBRACE               : 11
LPAREN               : 5 9 10 14
NUMBER               : 6 7
PLUS                 : 8
RBRACE               : 11
RELOP                : 7
RPAREN               : 5 9 10 14
SEMI                 : 5 5 14
STRING               : 14
WHILE                : 9
error                : 

Nonterminals, with rules where they appear

assignment           : 5
block                : 5 9 10
condition            : 5 9 10
control_structure    : 1
for_loop             : 2
if_statement         : 4
increment            : 5
program              : 0
statement            : 12 13
statement_list       : 11 13
while_loop           : 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . control_structure
    (2) control_structure -> . for_loop
    (3) control_structure -> . while_loop
    (4) control_structure -> . if_statement
    (5) for_loop -> . FOR LPAREN assignment SEMI condition SEMI increment RPAREN block
    (9) while_loop -> . WHILE LPAREN condition RPAREN block
    (10) if_statement -> . IF LPAREN condition RPAREN block

    FOR             shift and go to state 6
    WHILE           shift and go to state 7
    IF              shift and go to state 8

    program                        shift and go to state 1
    control_structure              shift and go to state 2
    for_loop                       shift and go to state 3
    while_loop                     shift and go to state 4
    if_statement                   shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> control_structure .

    $end            reduce using rule 1 (program -> control_structure .)


state 3

    (2) control_structure -> for_loop .

    $end            reduce using rule 2 (control_structure -> for_loop .)


state 4

    (3) control_structure -> while_loop .

    $end            reduce using rule 3 (control_structure -> while_loop .)


state 5

    (4) control_structure -> if_statement .

    $end            reduce using rule 4 (control_structure -> if_statement .)


state 6

    (5) for_loop -> FOR . LPAREN assignment SEMI condition SEMI increment RPAREN block

    LPAREN          shift and go to state 9


state 7

    (9) while_loop -> WHILE . LPAREN condition RPAREN block

    LPAREN          shift and go to state 10


state 8

    (10) if_statement -> IF . LPAREN condition RPAREN block

    LPAREN          shift and go to state 11


state 9

    (5) for_loop -> FOR LPAREN . assignment SEMI condition SEMI increment RPAREN block
    (6) assignment -> . IDENTIFIER ASSIGN NUMBER

    IDENTIFIER      shift and go to state 13

    assignment                     shift and go to state 12

state 10

    (9) while_loop -> WHILE LPAREN . condition RPAREN block
    (7) condition -> . IDENTIFIER RELOP NUMBER

    IDENTIFIER      shift and go to state 15

    condition                      shift and go to state 14

state 11

    (10) if_statement -> IF LPAREN . condition RPAREN block
    (7) condition -> . IDENTIFIER RELOP NUMBER

    IDENTIFIER      shift and go to state 15

    condition                      shift and go to state 16

state 12

    (5) for_loop -> FOR LPAREN assignment . SEMI condition SEMI increment RPAREN block

    SEMI            shift and go to state 17


state 13

    (6) assignment -> IDENTIFIER . ASSIGN NUMBER

    ASSIGN          shift and go to state 18


state 14

    (9) while_loop -> WHILE LPAREN condition . RPAREN block

    RPAREN          shift and go to state 19


state 15

    (7) condition -> IDENTIFIER . RELOP NUMBER

    RELOP           shift and go to state 20


state 16

    (10) if_statement -> IF LPAREN condition . RPAREN block

    RPAREN          shift and go to state 21


state 17

    (5) for_loop -> FOR LPAREN assignment SEMI . condition SEMI increment RPAREN block
    (7) condition -> . IDENTIFIER RELOP NUMBER

    IDENTIFIER      shift and go to state 15

    condition                      shift and go to state 22

state 18

    (6) assignment -> IDENTIFIER ASSIGN . NUMBER

    NUMBER          shift and go to state 23


state 19

    (9) while_loop -> WHILE LPAREN condition RPAREN . block
    (11) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 25

    block                          shift and go to state 24

state 20

    (7) condition -> IDENTIFIER RELOP . NUMBER

    NUMBER          shift and go to state 26


state 21

    (10) if_statement -> IF LPAREN condition RPAREN . block
    (11) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 25

    block                          shift and go to state 27

state 22

    (5) for_loop -> FOR LPAREN assignment SEMI condition . SEMI increment RPAREN block

    SEMI            shift and go to state 28


state 23

    (6) assignment -> IDENTIFIER ASSIGN NUMBER .

    SEMI            reduce using rule 6 (assignment -> IDENTIFIER ASSIGN NUMBER .)


state 24

    (9) while_loop -> WHILE LPAREN condition RPAREN block .

    $end            reduce using rule 9 (while_loop -> WHILE LPAREN condition RPAREN block .)


state 25

    (11) block -> LBRACE . statement_list RBRACE
    (12) statement_list -> . statement
    (13) statement_list -> . statement statement_list
    (14) statement -> . IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI

    IDENTIFIER      shift and go to state 31

    statement_list                 shift and go to state 29
    statement                      shift and go to state 30

state 26

    (7) condition -> IDENTIFIER RELOP NUMBER .

    RPAREN          reduce using rule 7 (condition -> IDENTIFIER RELOP NUMBER .)
    SEMI            reduce using rule 7 (condition -> IDENTIFIER RELOP NUMBER .)


state 27

    (10) if_statement -> IF LPAREN condition RPAREN block .

    $end            reduce using rule 10 (if_statement -> IF LPAREN condition RPAREN block .)


state 28

    (5) for_loop -> FOR LPAREN assignment SEMI condition SEMI . increment RPAREN block
    (8) increment -> . IDENTIFIER PLUS

    IDENTIFIER      shift and go to state 33

    increment                      shift and go to state 32

state 29

    (11) block -> LBRACE statement_list . RBRACE

    RBRACE          shift and go to state 34


state 30

    (12) statement_list -> statement .
    (13) statement_list -> statement . statement_list
    (12) statement_list -> . statement
    (13) statement_list -> . statement statement_list
    (14) statement -> . IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI

    RBRACE          reduce using rule 12 (statement_list -> statement .)
    IDENTIFIER      shift and go to state 31

    statement                      shift and go to state 30
    statement_list                 shift and go to state 35

state 31

    (14) statement -> IDENTIFIER . DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI

    DOT             shift and go to state 36


state 32

    (5) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment . RPAREN block

    RPAREN          shift and go to state 37


state 33

    (8) increment -> IDENTIFIER . PLUS

    PLUS            shift and go to state 38


state 34

    (11) block -> LBRACE statement_list RBRACE .

    $end            reduce using rule 11 (block -> LBRACE statement_list RBRACE .)


state 35

    (13) statement_list -> statement statement_list .

    RBRACE          reduce using rule 13 (statement_list -> statement statement_list .)


state 36

    (14) statement -> IDENTIFIER DOT . IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI

    IDENTIFIER      shift and go to state 39


state 37

    (5) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN . block
    (11) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 25

    block                          shift and go to state 40

state 38

    (8) increment -> IDENTIFIER PLUS .

    RPAREN          reduce using rule 8 (increment -> IDENTIFIER PLUS .)


state 39

    (14) statement -> IDENTIFIER DOT IDENTIFIER . LPAREN STRING COMMA IDENTIFIER RPAREN SEMI

    LPAREN          shift and go to state 41


state 40

    (5) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN block .

    $end            reduce using rule 5 (for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN block .)


state 41

    (14) statement -> IDENTIFIER DOT IDENTIFIER LPAREN . STRING COMMA IDENTIFIER RPAREN SEMI

    STRING          shift and go to state 42


state 42

    (14) statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING . COMMA IDENTIFIER RPAREN SEMI

    COMMA           shift and go to state 43


state 43

    (14) statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA . IDENTIFIER RPAREN SEMI

    IDENTIFIER      shift and go to state 44


state 44

    (14) statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER . RPAREN SEMI

    RPAREN          shift and go to state 45


state 45

    (14) statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN . SEMI

    SEMI            shift and go to state 46


state 46

    (14) statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI .

    IDENTIFIER      reduce using rule 14 (statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI .)
    RBRACE          reduce using rule 14 (statement -> IDENTIFIER DOT IDENTIFIER LPAREN STRING COMMA IDENTIFIER RPAREN SEMI .)

